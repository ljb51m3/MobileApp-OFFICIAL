//Incase any of this stuff (god forbid) gets lost//

Make sure that if you are going to run this you have installed react-native-calendars, expo-calendar, 'react-native-gesture-handler', and 'react-native-picker/picker'

Its still a work in progress... but...y'know

import { View, Alert, Text, ScrollView, TextInput, Modal, Platform } from 'react-native';
import { Calendar } from 'react-native-calendars';
import * as ExpoCalendar from 'expo-calendar';
import { SetStateAction, useEffect, useState } from 'react';
import React from 'react';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { Picker } from '@react-native-picker/picker';

export default function HomeScreen() {
  const [events, setEvents] = useState([]);
  const [selectedDate, setSelectedDate] = useState('');
  const [showEventModal, setShowEventModal] = useState(false);
  const [showTimePickerModal, setShowTimePickerModal] = useState(false);
  const [isStartTime, setIsStartTime] = useState(true);
  const [newEvent, setNewEvent] = useState({
    title: '',
    location: '',
    notes: '',
    startTime: '12:00',
    endTime: '1:00',
  });
  const [startPeriod, setStartPeriod] = useState('AM');
  const [endPeriod, setEndPeriod] = useState('AM');
  const [showDatePickerModal, setShowDatePickerModal] = useState(false);
  const [selectedEventDate, setSelectedEventDate] = useState(new Date().toISOString().split('T')[0]);
  const [expandedEventId, setExpandedEventId] = useState<string | null>(null);

  const generateTimeOptions = () => {
    const times = [];
    for (let i = 1; i <= 12; i++) {
      for (let j = 0; j < 60; j += 15) {
        const hour = i;
        const minute = j.toString().padStart(2, '0');
        times.push(`${hour}:${minute}`);
      }
    }
    return times;
  };

  const timeOptions = generateTimeOptions();

  const formatTo24Hour = (time: string, period: string) => {
    const [hours, minutes] = time.split(':');
    let hour = parseInt(hours);
    
    if (period === 'PM' && hour !== 12) {
      hour += 12;
    } else if (period === 'AM' && hour === 12) {
      hour = 0;
    }
    
    return `${hour.toString().padStart(2, '0')}:${minutes}`;
  };

  const formatTo12Hour = (time: string) => {
    const [hours, minutes] = time.split(':');
    let hour = parseInt(hours);
    let period = 'AM';
    
    if (hour >= 12) {
      period = 'PM';
      if (hour > 12) hour -= 12;
    }
    if (hour === 0) hour = 12;
    
    return {
      time: `${hour}:${minutes}`,
      period
    };
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString + 'T12:00:00');
    return date.toLocaleDateString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const formatEventTime = (date: Date) => {
    let hours = date.getHours();
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const period = hours >= 12 ? 'PM' : 'AM';
    
    // Convert to 12-hour format
    if (hours > 12) {
      hours -= 12;
    } else if (hours === 0) {
      hours = 12;
    }
    
    return `${hours}:${minutes} ${period}`;
  };

  useEffect(() => {
    (async () => {
      // Request both calendar and reminders permissions with write access
      const calendarPermission = await ExpoCalendar.requestCalendarPermissionsAsync();
      const reminderPermission = await ExpoCalendar.requestRemindersPermissionsAsync();

      if (calendarPermission.status === 'granted' && reminderPermission.status === 'granted') {
        const calendars = await ExpoCalendar.getCalendarsAsync(ExpoCalendar.EntityTypes.EVENT);
        // Filter to get only writable calendars
        const writableCalendars = calendars.filter(calendar => calendar.allowsModifications);
        const calendarIds = writableCalendars.map(calendar => calendar.id);
        const events = await ExpoCalendar.getEventsAsync(
          calendarIds,
          new Date(),
          new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
        );
        setEvents(events as any);
      } else {
        Alert.alert(
          'Permissions Required',
          'Calendar and reminders permissions are required to use this feature'
        );
      }
    })();
  }, []);

  const getEventsForDate = (date: string) => {
    return events.filter((event: ExpoCalendar.Event) => {
      const eventDate = typeof event.startDate === 'string' 
        ? event.startDate.split('T')[0] 
        : event.startDate.toISOString().split('T')[0];
      return eventDate === date;
    });
  };

  const addEvent = async () => {
    try {
      const calendars = await ExpoCalendar.getCalendarsAsync();
      const writableCalendar = calendars.find(calendar => calendar.allowsModifications);
      
      if (!writableCalendar) {
        Alert.alert('Error', 'No writable calendar found');
        return;
      }

      const eventDate = new Date(selectedEventDate + 'T12:00:00');
      
      // Convert times to 24-hour format for storage
      const start24 = formatTo24Hour(newEvent.startTime, startPeriod);
      const end24 = formatTo24Hour(newEvent.endTime, endPeriod);
      
      // Parse start time
      const [startHours, startMinutes] = start24.split(':');
      eventDate.setHours(parseInt(startHours), parseInt(startMinutes), 0, 0);
      const startDate = new Date(eventDate);

      // Parse end time
      const endDate = new Date(eventDate);
      const [endHours, endMinutes] = end24.split(':');
      endDate.setHours(parseInt(endHours), parseInt(endMinutes), 0, 0);

      await ExpoCalendar.createEventAsync(writableCalendar.id, {
        title: newEvent.title || 'New Event',
        startDate,
        endDate,
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        location: newEvent.location,
        notes: newEvent.notes,
        alarms: []
      });

      // Refresh events from ALL calendars
      const allCalendars = await ExpoCalendar.getCalendarsAsync(ExpoCalendar.EntityTypes.EVENT);
      const writableCalendars = allCalendars.filter(calendar => calendar.allowsModifications);
      const calendarIds = writableCalendars.map(calendar => calendar.id);
      
      const updatedEvents = await ExpoCalendar.getEventsAsync(
        calendarIds,
        new Date(),
        new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
      );
      setEvents(updatedEvents as any);
      
      // Reset form and close modal
      setNewEvent({
        title: '',
        location: '',
        notes: '',
        startTime: '12:00',
        endTime: '1:00',
      });
      setShowEventModal(false);
      Alert.alert('Success', 'Event added successfully!');
    } catch (error) {
      Alert.alert('Error', 'Failed to add event');
      console.error(error);
    }
  };

  const openTimePicker = (isStart: boolean) => {
    setIsStartTime(isStart);
    setShowTimePickerModal(true);
  };

  // Add function to delete event
  const deleteEvent = async (eventId: string) => {
    try {
      await ExpoCalendar.deleteEventAsync(eventId);
      
      // Refresh events list after deletion
      const calendars = await ExpoCalendar.getCalendarsAsync(ExpoCalendar.EntityTypes.EVENT);
      const writableCalendars = calendars.filter(calendar => calendar.allowsModifications);
      const calendarIds = writableCalendars.map(calendar => calendar.id);
      
      const updatedEvents = await ExpoCalendar.getEventsAsync(
        calendarIds,
        new Date(),
        new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
      );
      setEvents(updatedEvents as any);
      Alert.alert('Success', 'Event deleted successfully!');
    } catch (error) {
      Alert.alert('Error', 'Failed to delete event');
      console.error(error);
    }
  };

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={{ flex: 1 }}>
        <ScrollView 
          style={{ flex: 1 }}
          contentContainerStyle={{ 
            paddingTop: 50, 
            paddingHorizontal: 15,
            paddingBottom: 200
          }}
        >
          <View style={{ 
            flexDirection: 'row', 
            justifyContent: 'space-between', 
            alignItems: 'center', 
            marginBottom: 20 
          }}>
            <Text style={{ fontSize: 24, fontWeight: 'bold' }}>
              My Calendar
            </Text>
            <TouchableOpacity
              onPress={() => setShowEventModal(true)}
              style={{
                backgroundColor: '#2E66E7',
                padding: 10,
                borderRadius: 5,
              }}
            >
              <Text style={{ color: 'white' }}>Add Event</Text>
            </TouchableOpacity>
          </View>
          
          <Calendar
            onDayPress={(day: { dateString: SetStateAction<string>; }) => {
              setSelectedDate(day.dateString);
            }}
            markedDates={{
              ...events.reduce((acc, event: ExpoCalendar.Event) => ({
                ...acc,
                [typeof event.startDate === 'string' ? event.startDate.split('T')[0] : event.startDate.toISOString().split('T')[0]]: { marked: true }
              }), {}),
              [selectedDate]: { selected: true, marked: true, selectedColor: '#2E66E7' }
            }}
          />
          
          {selectedDate && (
            <View style={{ marginTop: 20, marginBottom: 20 }}>
              <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 10 }}>
                Events for {new Date(selectedDate).toLocaleDateString('en-US', {
                  month: 'long',
                  day: 'numeric',
                  year: 'numeric'
                })}:
              </Text>
              {getEventsForDate(selectedDate).map((event: ExpoCalendar.Event, index: number) => {
                const isExpanded = expandedEventId === event.id;
                const isAppCreatedEvent = event.calendarId?.includes('local') || false;

                console.log('Event:', { 
                  id: event.id, 
                  title: event.title, 
                  calendarId: event.calendarId,
                  isExpanded: isExpanded
                });

                return (
                  <TouchableOpacity
                    key={event.id}
                    onPress={() => {
                      console.log('Pressed event:', event.id);
                      console.log('Current expandedEventId:', expandedEventId);
                      setExpandedEventId(isExpanded ? null : event.id);
                    }}
                    style={[{ 
                      marginBottom: 10,
                      borderRadius: 8,
                      overflow: 'hidden',
                      elevation: 2,
                      shadowColor: '#000',
                      shadowOffset: { width: 0, height: 1 },
                      shadowOpacity: 0.22,
                      shadowRadius: 2.22,
                      borderWidth: isAppCreatedEvent ? 3 : 0,
                      borderColor: isAppCreatedEvent ? '#4CAF50' : 'transparent',
                    }]}
                  >
                    <View style={{ 
                      backgroundColor: isAppCreatedEvent ? '#2E66E7' : '#f0f0f0',
                      padding: 15,
                      borderRadius: 6,
                    }}>
                      <View style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                      }}>
                        <Text style={{ 
                          fontWeight: 'bold', 
                          flex: 1,
                          fontSize: 16,
                          color: isAppCreatedEvent ? 'white' : '#000'
                        }}>
                          {event.title}
                        </Text>
                        <Text style={{ 
                          color: isAppCreatedEvent ? 'rgba(255,255,255,0.8)' : '#666',
                          fontSize: 14,
                        }}>
                          {formatEventTime(new Date(event.startDate))}
                        </Text>
                      </View>

                      {isExpanded && (
                        <View style={{ 
                          marginTop: 10,
                          paddingTop: 10,
                          borderTopWidth: 1,
                          borderTopColor: isAppCreatedEvent ? 'rgba(255,255,255,0.2)' : '#ddd'
                        }}>
                          <Text style={{ 
                            marginBottom: 8,
                            color: isAppCreatedEvent ? 'white' : '#333'
                          }}>
                            {event.notes || 'No notes'}
                          </Text>
                          <Text style={{ 
                            color: isAppCreatedEvent ? 'rgba(255,255,255,0.9)' : '#666',
                            fontSize: 14,
                          }}>
                            {formatEventTime(new Date(event.startDate))} - {formatEventTime(new Date(event.endDate))}
                          </Text>
                          {event.location && (
                            <Text style={{ 
                              marginTop: 8,
                              color: isAppCreatedEvent ? 'rgba(255,255,255,0.9)' : '#666',
                              fontSize: 14,
                            }}>
                              📍 {event.location}
                            </Text>
                          )}
                          
                          <TouchableOpacity
                            onPress={() => {
                              Alert.alert(
                                'Delete Event',
                                'Are you sure you want to delete this event?',
                                [
                                  {
                                    text: 'Cancel',
                                    style: 'cancel'
                                  },
                                  {
                                    text: 'Delete',
                                    onPress: () => deleteEvent(event.id),
                                    style: 'destructive'
                                  }
                                ]
                              );
                            }}
                            style={{
                              backgroundColor: '#ff4444',
                              padding: 10,
                              borderRadius: 6,
                              marginTop: 12,
                              alignItems: 'center',
                            }}
                          >
                            <Text style={{ 
                              color: 'white', 
                              fontWeight: '600',
                              fontSize: 14,
                            }}>
                              Delete Event
                            </Text>
                          </TouchableOpacity>
                        </View>
                      )}
                    </View>
                  </TouchableOpacity>
                );
              })}
              {getEventsForDate(selectedDate).length === 0 && (
                <Text>No events for this date</Text>
              )}
            </View>
          )}
        </ScrollView>

        <Modal
          visible={showEventModal}
          animationType="slide"
          transparent={true}
        >
          <View style={{ 
            flex: 1, 
            backgroundColor: 'rgba(0,0,0,0.5)',
            justifyContent: 'center'
          }}>
            <View style={{ 
              backgroundColor: 'white',
              margin: 20,
              padding: 20,
              borderRadius: 10,
              zIndex: 1000,
            }}>
              <Text style={{ fontSize: 20, fontWeight: 'bold', marginBottom: 20 }}>
                Add New Event
              </Text>
              
              <TextInput
                placeholder="Event Title"
                value={newEvent.title}
                onChangeText={(text) => setNewEvent({...newEvent, title: text})}
                style={{
                  borderWidth: 1,
                  borderColor: '#ddd',
                  padding: 10,
                  marginBottom: 10,
                  borderRadius: 5,
                }}
              />

              <TextInput
                placeholder="Location"
                value={newEvent.location}
                onChangeText={(text) => setNewEvent({...newEvent, location: text})}
                style={{
                  borderWidth: 1,
                  borderColor: '#ddd',
                  padding: 10,
                  marginBottom: 10,
                  borderRadius: 5,
                }}
              />

              <TextInput
                placeholder="Notes"
                value={newEvent.notes}
                onChangeText={(text) => setNewEvent({...newEvent, notes: text})}
                style={{
                  borderWidth: 1,
                  borderColor: '#ddd',
                  padding: 10,
                  marginBottom: 10,
                  borderRadius: 5,
                }}
              />

              <View style={{ marginBottom: 10 }}>
                <Text style={{ marginBottom: 5 }}>Date</Text>
                <TouchableOpacity
                  onPress={() => setShowDatePickerModal(true)}
                  style={{
                    borderWidth: 1,
                    borderColor: '#ddd',
                    padding: 15,
                    borderRadius: 5,
                  }}
                >
                  <Text>{formatDate(selectedEventDate)}</Text>
                </TouchableOpacity>
              </View>

              <View style={{ marginBottom: 10 }}>
                <Text style={{ marginBottom: 5 }}>Start Time</Text>
                <TouchableOpacity
                  onPress={() => openTimePicker(true)}
                  style={{
                    borderWidth: 1,
                    borderColor: '#ddd',
                    padding: 15,
                    borderRadius: 5,
                  }}
                >
                  <Text>{newEvent.startTime} {startPeriod}</Text>
                </TouchableOpacity>
              </View>

              <View style={{ marginBottom: 20 }}>
                <Text style={{ marginBottom: 5 }}>End Time</Text>
                <TouchableOpacity
                  onPress={() => openTimePicker(false)}
                  style={{
                    borderWidth: 1,
                    borderColor: '#ddd',
                    padding: 15,
                    borderRadius: 5,
                  }}
                >
                  <Text>{newEvent.endTime} {endPeriod}</Text>
                </TouchableOpacity>
              </View>

              <View style={{ 
                flexDirection: 'row', 
                justifyContent: 'space-between',
                marginTop: 20
              }}>
                <TouchableOpacity
                  onPress={() => {
                    setShowEventModal(false);
                    setNewEvent({
                      title: '',
                      location: '',
                      notes: '',
                      startTime: '12:00',
                      endTime: '1:00',
                    });
                  }}
                  style={{
                    backgroundColor: '#f8f9fa',
                    paddingVertical: 16,
                    paddingHorizontal: 12,
                    borderRadius: 8,
                    flex: 1,
                    marginRight: 10,
                    borderWidth: 1,
                    borderColor: '#dee2e6',
                    alignItems: 'center',
                    justifyContent: 'center',
                    minHeight: 70,
                  }}
                >
                  <View style={{
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}>
                    <Text style={{ 
                      color: '#495057',
                      fontSize: 14,
                      fontWeight: '600',
                      textAlign: 'center',
                      marginBottom: 4,
                    }}>
                      Cancel Event
                    </Text>
                    <Text style={{ 
                      color: '#6c757d',
                      fontSize: 11,
                      textAlign: 'center',
                    }}>
                      Discard changes
                    </Text>
                  </View>
                </TouchableOpacity>

                <TouchableOpacity
                  onPress={addEvent}
                  style={{
                    backgroundColor: '#2E66E7',
                    paddingVertical: 16,
                    paddingHorizontal: 12,
                    borderRadius: 8,
                    flex: 1,
                    marginLeft: 10,
                    alignItems: 'center',
                    justifyContent: 'center',
                    shadowColor: '#000',
                    shadowOffset: {
                      width: 0,
                      height: 2,
                    },
                    shadowOpacity: 0.25,
                    shadowRadius: 3.84,
                    elevation: 5,
                    minHeight: 70,
                  }}
                >
                  <View style={{
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}>
                    <Text style={{ 
                      color: 'white',
                      fontSize: 14,
                      fontWeight: '600',
                      textAlign: 'center',
                      marginBottom: 4,
                    }}>
                      Save Event
                    </Text>
                    <Text style={{ 
                      color: 'rgba(255,255,255,0.8)',
                      fontSize: 11,
                      textAlign: 'center',
                    }}>
                      Add to calendar
                    </Text>
                  </View>
                </TouchableOpacity>
              </View>

              {/* Date Picker Modal */}
              <Modal
                visible={showDatePickerModal}
                animationType="slide"
                transparent={true}
              >
                <View style={{ 
                  flex: 1, 
                  backgroundColor: 'rgba(0,0,0,0.5)',
                  justifyContent: 'center',
                  zIndex: 2000,
                }}>
                  <View style={{ 
                    backgroundColor: 'white',
                    margin: 20,
                    padding: 20,
                    borderRadius: 10,
                  }}>
                    <Text style={{ 
                      fontSize: 18, 
                      fontWeight: 'bold', 
                      marginBottom: 15, 
                      textAlign: 'center' 
                    }}>
                      Select Date
                    </Text>

                    <Calendar
                      onDayPress={(
                        day: { dateString: SetStateAction<string>; }
                      ) => {
                        setSelectedEventDate(day.dateString);
                      }}
                      markedDates={{
                        [selectedEventDate]: { selected: true, selectedColor: '#2E66E7' }
                      }}
                      style={{
                        borderRadius: 10,
                        elevation: 4,
                        margin: 10,
                      }}
                    />

                    <TouchableOpacity
                      onPress={() => setShowDatePickerModal(false)}
                      style={{
                        backgroundColor: '#2E66E7',
                        paddingVertical: 16,
                        paddingHorizontal: 12,
                        borderRadius: 8,
                        marginTop: 20,
                        shadowColor: '#000',
                        shadowOffset: {
                          width: 0,
                          height: 2,
                        },
                        shadowOpacity: 0.25,
                        shadowRadius: 3.84,
                        elevation: 5,
                      }}
                    >
                      <View style={{
                        alignItems: 'center',
                        justifyContent: 'center',
                      }}>
                        <Text style={{ 
                          color: 'white',
                          fontSize: 14,
                          fontWeight: '600',
                          textAlign: 'center',
                          marginBottom: 4,
                        }}>
                          Confirm Date
                        </Text>
                        <Text style={{ 
                          color: 'rgba(255,255,255,0.8)',
                          fontSize: 11,
                          textAlign: 'center',
                        }}>
                          Set selected date
                        </Text>
                      </View>
                    </TouchableOpacity>
                  </View>
                </View>
              </Modal>

              {/* Time Picker Modal */}
              <Modal
                visible={showTimePickerModal}
                animationType="slide"
                transparent={true}
              >
                <View style={{ 
                  flex: 1, 
                  backgroundColor: 'rgba(0,0,0,0.5)',
                  justifyContent: 'center',
                }}>
                  <View style={{ 
                    backgroundColor: 'white',
                    margin: 20,
                    padding: 20,
                    borderRadius: 10,
                  }}>
                    <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 15, textAlign: 'center' }}>
                      Select {isStartTime ? 'Start' : 'End'} Time
                    </Text>
                    
                    <View style={{ 
                      flexDirection: 'row',
                      marginBottom: 20,
                    }}>
                      <View style={{ flex: 2 }}>
                        <Picker
                          selectedValue={isStartTime ? newEvent.startTime : newEvent.endTime}
                          onValueChange={(itemValue) => 
                            setNewEvent({
                              ...newEvent,
                              [isStartTime ? 'startTime' : 'endTime']: itemValue
                            })
                          }
                          style={{ height: 150 }}
                        >
                          {timeOptions.map((time) => (
                            <Picker.Item key={time} label={time} value={time} />
                          ))}
                        </Picker>
                      </View>
                      <View style={{ flex: 1 }}>
                        <Picker
                          selectedValue={isStartTime ? startPeriod : endPeriod}
                          onValueChange={(value) => 
                            isStartTime ? setStartPeriod(value) : setEndPeriod(value)
                          }
                          style={{ height: 150 }}
                        >
                          <Picker.Item label="AM" value="AM" />
                          <Picker.Item label="PM" value="PM" />
                        </Picker>
                      </View>
                    </View>

                    <TouchableOpacity
                      onPress={() => setShowTimePickerModal(false)}
                      style={{
                        backgroundColor: '#2E66E7',
                        paddingVertical: 15,
                        paddingHorizontal: 25,
                        borderRadius: 8,
                        shadowColor: '#000',
                        shadowOffset: {
                          width: 0,
                          height: 2,
                        },
                        shadowOpacity: 0.25,
                        shadowRadius: 3.84,
                        elevation: 5,
                      }}
                    >
                      <Text style={{ 
                        color: 'white',
                        textAlign: 'center',
                        fontSize: 16,
                        fontWeight: '600'
                      }}>
                        Confirm Time
                      </Text>
                      <Text style={{ 
                        color: 'rgba(255,255,255,0.8)',
                        textAlign: 'center',
                        fontSize: 12,
                        marginTop: 4
                      }}>
                        Set selected time
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              </Modal>
            </View>
          </View>
        </Modal>
      </View>
    </GestureHandlerRootView>
  );
}
